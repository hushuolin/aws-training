{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
      "DynamoDBTable": {
        "Type": "AWS::DynamoDB::Table",
        "Properties": {
          "TableName": "KinesisDataTable",
          "AttributeDefinitions": [
            { "AttributeName": "id", "AttributeType": "S" }
          ],
          "KeySchema": [
            { "AttributeName": "id", "KeyType": "HASH" }
          ],
          "BillingMode": "PAY_PER_REQUEST",
          "StreamSpecification": {
            "StreamViewType": "NEW_AND_OLD_IMAGES"
          }
        }
      },
      "KinesisStream": {
        "Type": "AWS::Kinesis::Stream",
        "Properties": {
          "Name": "KinesisDataStream",
          "ShardCount": 1
        }
      },
      "LambdaExecutionRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Service": "lambda.amazonaws.com" },
                "Action": "sts:AssumeRole"
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "LambdaDynamoDBPolicy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:PutItem",
                      "kinesis:GetRecords",
                      "kinesis:GetShardIterator",
                      "kinesis:DescribeStream",
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        }
      },
      "KinesisLambdaFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "KinesisProcessorLambda",
          "Runtime": "python3.8",
          "Role": { "Fn::GetAtt": [ "LambdaExecutionRole", "Arn" ] },
          "Handler": "index.lambda_handler",
          "Code": {
            "ZipFile": {
              "Fn::Sub": "\nimport json\nimport base64\nimport boto3\n\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('KinesisDataTable')\n\ndef lambda_handler(event, context):\n    for record in event['Records']:\n        try:\n            payload = base64.b64decode(record['kinesis']['data']).decode('utf-8')\n            data = json.loads(payload)\n            table.put_item(Item={ 'id': str(data['id']), 'message': data['message'], 'timestamp': str(data['timestamp'])})\n            print(f\"Data inserted into DynamoDB: {data}\")\n        except Exception as e:\n            print(f\"Error processing record: {str(e)}\")\n    return {'statusCode': 200, 'body': 'Success'}"
            }
          },
          "Timeout": 60
        }
      },
      "KinesisEventSourceMapping": {
        "Type": "AWS::Lambda::EventSourceMapping",
        "Properties": {
          "BatchSize": 100,
          "EventSourceArn": { "Fn::GetAtt": [ "KinesisStream", "Arn" ] },
          "FunctionName": { "Ref": "KinesisLambdaFunction" },
          "StartingPosition": "TRIM_HORIZON"
        }
      }
    }
  }
  